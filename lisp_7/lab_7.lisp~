;;1. Написать хвостовую рекурсивную функцию my-reverse, которая развернет верхний уровень своего списка-аргумента lst.

(defun my-reverse-ins (lst tmp)
  (cond ((null (cdr lst)) (cons (car lst) tmp))
	(T (my-reverse-ins (cdr lst) (cons (car lst) tmp)))))

(defun my-reverse (lst)
  (my-reverse-ins lst ()))

;;3. Написать функцию, которая возвращает первый элемент списка -аргумента, который сам является непустым списком.
;; (1 2 (3 4) 6 (7 8 9)) -> (3 4)

(defun first-lst-el (lst)
  (cond ((listp (car lst)) (car lst))
	((null (cdr lst)) nil)
	(T (first-lst-el (cdr lst)))
   ))

;;4. Написать функцию, которая выбирает из заданного списка только те числа, которые больше 1 и меньше 10. (Вариант: между двумя заданными границами. )
;;+
;;8. Напишите функцию, select-between, которая из списка-аргумента, содержащего только числа, выбирает только те, которые расположены между двумя указанными границами- аргументами и возвращает их в виде списка (упорядоченного по возрастанию списка чисел (+ 2 балла)).
;; (3 2 9 10 4 8 6) 2 8 -> (3 4 6 8)

(defun add-to-sorted (x lst)
  (cond ((<= x (car lst)) (cons x lst))
	((null (cdr lst)) (cons x nil))
	(T (cons (car lst) (add-to-sorted x (cdr lst))))
	))



(defun is-between (x b1 b2)
  (or (and (>= x b1) (<= x b2))
      (and (<= x b1) (>= x b2))))

; x = (cons x nil)
(defun insert-to-sorted (x lst plst)
  (cond ((null (cdr lst))
	 (setf (cdr lst) x)
	 plst)
	((is-between (car x) (car lst) (cadr lst))
	 (princ (cdr lst))
	 (princ x)
	 (setf (cdr x) (cdr lst))
	 (setf (cdr lst) x)
	 plst)
	(T (insert-to-sorted x (cdr lst) plst))
    ))

;; res (cons nil nil)
(defun select-between-ins (lst b1 b2 res)
  (cond ((null lst) res)
	((is-between (car lst) b1 b2)
	 (add-to-sorted (car lst) res res)
	 (select-between (cdr lst) b1 b2 res))
	(T (select-between (cdr lst) b1 b2 res))))


;;7. Напишите рекурсивную функцию, которая умножает на заданное число-аргумент все числа из заданного списка-аргумента, когда
;; a) все элементы списка --- числа,
;; 6) элементы списка -- любые объекты.


;;8. Написать рекурсивную версию (с именем rec-add) вычисления суммы чисел заданного списка:
;; а) одноуровнего смешанного,
;; б) структурированного.

;;9. Написать рекурсивную версию с именем recnth функции nth.

(defun mynth (n lst)
  (cond ((null lst) Nil)
	((eq 0 n) (car lst))
	(T  (mynth (- n 1) (cdr lst)))))

;;10. Написать рекурсивную функцию allodd, которая возвращает t когда все элементы списка нечетные.

;;11. Написать рекурсивную функцию, которая возвращает первое нечетное число из списка (структурированного), возможно создавая некоторые вспомогательные функции.

;;12. Используя cons-дополняемую рекурсию с одним тестом завершения, написать функцию которая получает как аргумент список чисел, а возвращает список квадратов этих чисел в том же порядке.
