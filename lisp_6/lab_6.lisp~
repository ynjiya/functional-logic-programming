;;Используя функционалы: apply, funcall, mapcar, maplist.

;; apply - Applies the function to the args (Its last argument must be a list, and the elements of this list become individual arguments to the function.)

;; funcall -  Applies the function to the args

;; mapcar - call function with car's of lst as an agrument
;; => result-list

;; mapcan
;; => concatenated-results

;; maplist - call function with cdr's of lst as an argument 
;; => result-list

;; mapcon
;; => concatenated-results



;; 1. Напишите функцию, которая уменьшает на 10 все числа из списка-аргумента этой функции.

(defun subtract-list-10 (lst)
  (mapcar #'(lambda (x) (- x 10)) lst))

;;2. Напишите функцию, которая умножает на заданное число-аргумент все числа из заданного списка-аргумента, когда
;; a) все элементы списка --- числа, (1 2 3) 10 -> (10 20 30)

(defun mult-randlist (lst num)
  (mapcar #'(lambda (x) (if (numberp x) (* x num) x)) lst))

;; б) элементы списка -- любые объекты. (a 1 2 sdf 3) 10 -> (a 10 20 sdf 30)

(defun mult-numlist (num lst)
  (mapcar #'(lambda (x) (* num x)) lst))

;;3. Написать функцию, которая по своему списку-аргументу lst определяет является ли он палиндромом (то есть равны ли lst и (reverse lst)).



(defun is-pali-ins (tmp lst)
  (cond ((null lst) nil)
	((or (equal tmp lst) (equal tmp (cdr lst))) T)
	(T (is-p2-ins (cons (car lst) tmp) (cdr lst) )) ))

(defun is-pali (lst) (is-p2-ins () lst))


(defun is-palindrom (lst)
  (let ((tmp ()))
    (maplist #'(lambda (l)
		 (or (equal (cons (car l) tmp) l)
		     (equal (cons (car l) tmp) (cdr l))) )
	     lst )
    ))


(defun is-palindrom (lst)
  (maplist #'(
	      mapcar #'car)))

(defun t (x)
  ((+ x 10)
  (* x 30)))

;;4. Написать предикат set-equal, который возвращает t, если два его множества- аргумента содержат одни и те же элементы, порядок которых не имеет значения.



;;5. Написать функцию которая получает как аргумент список чисел, а возвращает список квадратов этих чисел в том же порядке.

;;6. Напишите функцию, select-between, которая из списка-аргумента, содержащего только числа, выбирает только те, которые расположены между двумя указанными границами- аргументами и возвращает их в виде списка (упорядоченного по возрастанию списка чисел (+ 2 балла)).

;;7. Написать функцию, вычисляющую декартово произведение двух своих списков- аргументов. ( Напомним, что А х В это множество всевозможных пар (a b), где а принадлежит А, принадлежит В.)

;;8. Почему так реализовано reduce, в чем причина?
;; (reduce #'+0) -> 0
;; (reduce #'+ ()) -> 0

;;9. Пусть list-of-list список, состоящий из списков. Написать функцию, которая вычисляет сумму длин всех элементов list-of-list, т.е. например для аргумента ((1 2) (3 4)) -> 4.
